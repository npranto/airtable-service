{"version":3,"file":"air-service.esm.js","sources":["../index.js"],"sourcesContent":["/**\n * @module AirtableService\n * @description Provides functions to interact with Airtable API.\n */\n\nimport axios from \"axios\";\nimport pkgJSON from \"./package.json\";\n\nconst validateData = (data, validator) => {\n  if (!validator || typeof validator !== \"func\") {\n    return {\n      isValid: true,\n      error: null,\n    };\n  }\n\n  const validatorOutput = validator(data) || {};\n  const validatorOutputKeys = Object.keys(validatorOutput);\n  if (\n    !validatorOutputKeys ||\n    !validatorOutputKeys.length ||\n    !validatorOutputKeys.includes(\"isValid\") ||\n    !validatorOutputKeys.includes(\"error\")\n  ) {\n    throw new Error(\n      \"`validator` function must return an object with `isValid` and `error` properties\"\n    );\n  }\n\n  return {\n    isValid: validatorOutput.isValid,\n    error: validatorOutput.error,\n  };\n};\n\n/**\n * Logs the current version of the Airtable service.\n * @function\n */\nfunction airServiceLog() {\n  console.log(`Airtable Service - v${pkgJSON.version}`);\n}\n\n/**\n * Retrieves all records from a specific table in Airtable\n * @async\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to retrieve records from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Array>} - Promise that resolves to an array of records\n * @throws {Error} - Throws an error if unable to retrieve records from Airtable\n */\nasync function getAllRecords(config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}`;\n  console.log(\"url: \", url);\n  const response = await axios.get(url, {\n    headers: {\n      Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n    },\n  });\n  if (response.status === 200) {\n    return response.data.records;\n  } else {\n    throw new Error(\"Unable to get records from Airtable\");\n  }\n}\n\n/**\n * Retrieves a specific record from an Airtable table by its ID\n * @async\n * @param {string} recordId - ID of the record to retrieve\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to retrieve the record from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object|null>} - Promise that resolves to the retrieved record or null if not found\n * @throws {Error} - Throws an error if unable to retrieve the record from Airtable\n */\nasync function getRecordById(recordId, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to get record from Airtable\");\n    }\n  }\n}\n\n/**\n * Creates a new record in an Airtable table with the specified data\n * @async\n * @param {Object} data - Data for the new record to be created\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to create the record in\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object>} - Promise that resolves to the newly created record\n * @throws {Error} - Throws an error if unable to create the record in Airtable\n */\nasync function createRecord(data, validator, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}`;\n  console.log(\"url: \", url);\n\n  const { isValid, error } = validateData(data, validator);\n\n  if (!isValid) {\n    throw new Error(error || \"Please pass in valid data to create a record\");\n  }\n\n  try {\n    const response = await axios.post(\n      url,\n      {\n        records: Array.isArray(data) ? [...data] : [data],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    throw new Error(\"Unable to create record in Airtable\");\n  }\n}\n\n/**\n * Updates a record in an Airtable table with the specified ID and data\n * @async\n * @param {string} recordId - ID of the record to update\n * @param {Object} data - New data for the record to be updated\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to update the record in\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object|null>} - Promise that resolves to the updated record or null if not found\n * @throws {Error} - Throws an error if unable to update the record in Airtable\n */\nasync function updateRecord(recordId, data, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n\n  const { isValid, error } = validateData(data, validator);\n\n  if (!isValid) {\n    throw new Error(error || \"Please pass in valid data to create a record\");\n  }\n\n  try {\n    const response = await axios.patch(\n      url,\n      {\n        records: Array.isArray(data) ? [...data] : [data],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to update record in Airtable\");\n    }\n  }\n}\n\n/**\n * Deletes a record from an Airtable table with the specified ID\n * @async\n * @param {string} recordId - ID of the record to delete\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to delete the record from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<string|null>} - Promise that resolves to the deleted record ID or null if not found\n * @throws {Error} - Throws an error if unable to delete the record from Airtable\n */\nasync function deleteRecord(recordId, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n  try {\n    const response = await axios.delete(url, {\n      headers: {\n        Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n      },\n    });\n    return recordId;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to delete record from Airtable\");\n    }\n  }\n}\n\n/**\n * Creates an instance of the AirtableService.\n * @param {Object} options - An object that contains the configuration for the AirtableService.\n * @param {string} options.AIRTABLE_API_KEY - The API key for the Airtable account.\n * @param {string} options.AIRTABLE_BASE_ID - The ID of the Airtable base.\n * @param {string} options.AIRTABLE_TABLE_NAME - The name of the table in the Airtable base.\n * @returns {AirtableService} An instance of the AirtableService.\n */\nexport function AirtableService({\n  AIRTABLE_API_KEY,\n  AIRTABLE_BASE_ID,\n  AIRTABLE_TABLE_NAME,\n}) {\n  const config = {\n    AIRTABLE_API_KEY,\n    AIRTABLE_BASE_ID,\n    AIRTABLE_TABLE_NAME,\n  };\n  return {\n    airServiceLog: () => airServiceLog(),\n    getAllRecords: () => getAllRecords(config),\n    getRecordById: (recordId) => getRecordById(recordId, config),\n    createRecord: (data, validator) => createRecord(data, validator, config),\n    updateRecord: (recordId, data, validator) =>\n      updateRecord(recordId, data, validator, config),\n    deleteRecord: (recordId) => deleteRecord(recordId, config),\n  };\n}\n"],"names":["_catch","body","recover","result","e","then","updateRecord","recordId","data","config","url","AIRTABLE_BASE_ID","AIRTABLE_TABLE_NAME","console","log","_validateData2","validateData","validator","isValid","Error","error","Promise","resolve","axios","patch","records","Array","isArray","concat","headers","Authorization","AIRTABLE_API_KEY","response","status","reject","validatorOutput","validatorOutputKeys","Object","keys","length","includes","AirtableService","_ref","airServiceLog","getAllRecords","get","getRecordById","createRecord","_validateData","post","deleteRecord"],"mappings":"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"}