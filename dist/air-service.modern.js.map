{"version":3,"file":"air-service.modern.js","sources":["../index.js"],"sourcesContent":["/**\n * @module AirtableService\n * @description Provides functions to interact with Airtable API.\n */\n\nimport axios from \"axios\";\nimport pkgJSON from \"./package.json\";\n\n/**\n * Logs the current version of the Airtable service.\n * @function\n */\nfunction airServiceLog() {\n  console.log(`Airtable Service - v${pkgJSON.version}`);\n}\n\n/**\n * Retrieves all records from a specific table in Airtable\n * @async\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to retrieve records from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Array>} - Promise that resolves to an array of records\n * @throws {Error} - Throws an error if unable to retrieve records from Airtable\n */\nasync function getAllRecords(config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}`;\n  console.log(\"url: \", url);\n  const response = await axios.get(url, {\n    headers: {\n      Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n    },\n  });\n  if (response.status === 200) {\n    return response.data.records;\n  } else {\n    throw new Error(\"Unable to get records from Airtable\");\n  }\n}\n\n/**\n * Retrieves a specific record from an Airtable table by its ID\n * @async\n * @param {string} recordId - ID of the record to retrieve\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to retrieve the record from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object|null>} - Promise that resolves to the retrieved record or null if not found\n * @throws {Error} - Throws an error if unable to retrieve the record from Airtable\n */\nasync function getRecordById(recordId, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to get record from Airtable\");\n    }\n  }\n}\n\n/**\n * Creates a new record in an Airtable table with the specified data\n * @async\n * @param {Object} data - Data for the new record to be created\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to create the record in\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object>} - Promise that resolves to the newly created record\n * @throws {Error} - Throws an error if unable to create the record in Airtable\n */\nasync function createRecord(data, validator, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}`;\n  console.log(\"url: \", url);\n\n  const validateData = (_data, _validator) => {\n    if (!validator || typeof validator !== \"func\") {\n      return {\n        isValid: true,\n        error: null,\n      };\n    }\n\n    const validatorOutput = validator(data) || {};\n    const validatorOutputKeys = Object.keys(validatorOutput);\n    if (\n      !validatorOutputKeys ||\n      !validatorOutputKeys.length ||\n      !validatorOutputKeys.includes(\"isValid\") ||\n      !validatorOutputKeys.includes(\"error\")\n    ) {\n      throw new Error(\n        \"`validator` function must return an object with `isValid` and `error` properties\"\n      );\n    }\n\n    return {\n      isValid: validatorOutput.isValid,\n      error: validatorOutput.error,\n    };\n  };\n\n  const { isValid, error } = validateData(data, validator);\n\n  if (!isValid) {\n    throw new Error(error || \"Please pass in valid data to create a record\");\n  }\n\n  try {\n    const response = await axios.post(\n      url,\n      {\n        records: Array.isArray(data) ? [...data] : [data],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    throw new Error(\"Unable to create record in Airtable\");\n  }\n}\n\n/**\n * Updates a record in an Airtable table with the specified ID and data\n * @async\n * @param {string} recordId - ID of the record to update\n * @param {Object} data - New data for the record to be updated\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to update the record in\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object|null>} - Promise that resolves to the updated record or null if not found\n * @throws {Error} - Throws an error if unable to update the record in Airtable\n */\nasync function updateRecord(recordId, data, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n  try {\n    const response = await axios.patch(\n      url,\n      {\n        records: Array.isArray(data) ? [...data] : [data],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to update record in Airtable\");\n    }\n  }\n}\n\n/**\n * Deletes a record from an Airtable table with the specified ID\n * @async\n * @param {string} recordId - ID of the record to delete\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to delete the record from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<string|null>} - Promise that resolves to the deleted record ID or null if not found\n * @throws {Error} - Throws an error if unable to delete the record from Airtable\n */\nasync function deleteRecord(recordId, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n  try {\n    const response = await axios.delete(url, {\n      headers: {\n        Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n      },\n    });\n    return recordId;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to delete record from Airtable\");\n    }\n  }\n}\n\n/**\n * Creates an instance of the AirtableService.\n * @param {Object} options - An object that contains the configuration for the AirtableService.\n * @param {string} options.AIRTABLE_API_KEY - The API key for the Airtable account.\n * @param {string} options.AIRTABLE_BASE_ID - The ID of the Airtable base.\n * @param {string} options.AIRTABLE_TABLE_NAME - The name of the table in the Airtable base.\n * @returns {AirtableService} An instance of the AirtableService.\n */\nexport function AirtableService({\n  AIRTABLE_API_KEY,\n  AIRTABLE_BASE_ID,\n  AIRTABLE_TABLE_NAME,\n}) {\n  const config = {\n    AIRTABLE_API_KEY,\n    AIRTABLE_BASE_ID,\n    AIRTABLE_TABLE_NAME,\n  };\n  return {\n    airServiceLog: () => airServiceLog(),\n    getAllRecords: () => getAllRecords(config),\n    getRecordById: (recordId) => getRecordById(recordId, config),\n    createRecord: (data, validator) => createRecord(data, validator, config),\n    updateRecord: (recordId) => updateRecord(recordId, config),\n    deleteRecord: (recordId) => deleteRecord(recordId, config),\n  };\n}\n"],"names":["AirtableService","AIRTABLE_API_KEY","AIRTABLE_BASE_ID","AIRTABLE_TABLE_NAME","config","airServiceLog","console","log","getAllRecords","async","url","response","axios","get","headers","Authorization","status","data","records","Error","getRecordById","recordId","error","createRecord","validator","isValid","validateData","_data","_validator","validatorOutput","validatorOutputKeys","Object","keys","length","includes","post","Array","isArray","updateRecord","patch","deleteRecord","delete"],"mappings":"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"}