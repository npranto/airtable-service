{"version":3,"file":"air-service.cjs","sources":["../index.js"],"sourcesContent":["/**\n * @module AirtableService\n * @description Provides functions to interact with Airtable API.\n */\n\nimport axios from \"axios\";\nimport pkgJSON from \"./package.json\";\n\n/**\n * Logs the current version of the Airtable service.\n * @function\n */\nfunction airServiceLog() {\n  console.log(`Airtable Service - v${pkgJSON.version}`);\n}\n\n/**\n * Retrieves all records from a specific table in Airtable\n * @async\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to retrieve records from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Array>} - Promise that resolves to an array of records\n * @throws {Error} - Throws an error if unable to retrieve records from Airtable\n */\nasync function getAllRecords(config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}`;\n  console.log(\"url: \", url);\n  const response = await axios.get(url, {\n    headers: {\n      Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n    },\n  });\n  if (response.status === 200) {\n    return response.data.records;\n  } else {\n    throw new Error(\"Unable to get records from Airtable\");\n  }\n}\n\n/**\n * Retrieves a specific record from an Airtable table by its ID\n * @async\n * @param {string} recordId - ID of the record to retrieve\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to retrieve the record from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object|null>} - Promise that resolves to the retrieved record or null if not found\n * @throws {Error} - Throws an error if unable to retrieve the record from Airtable\n */\nasync function getRecordById(recordId, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to get record from Airtable\");\n    }\n  }\n}\n\n/**\n * Creates a new record in an Airtable table with the specified data\n * @async\n * @param {Object} data - Data for the new record to be created\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to create the record in\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object>} - Promise that resolves to the newly created record\n * @throws {Error} - Throws an error if unable to create the record in Airtable\n */\nasync function createRecord(data, validator, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}`;\n  console.log(\"url: \", url);\n\n  const validateData = (_data, _validator) => {\n    if (!validator || typeof validator !== \"func\") {\n      return {\n        isValid: true,\n        error: null,\n      };\n    }\n\n    const validatorOutput = validator(data) || {};\n    const validatorOutputKeys = Object.keys(validatorOutput);\n    if (\n      !validatorOutputKeys ||\n      !validatorOutputKeys.length ||\n      !validatorOutputKeys.includes(\"isValid\") ||\n      !validatorOutputKeys.includes(\"error\")\n    ) {\n      throw new Error(\n        \"`validator` function must return an object with `isValid` and `error` properties\"\n      );\n    }\n\n    return {\n      isValid: validatorOutput.isValid,\n      error: validatorOutput.error,\n    };\n  };\n\n  const { isValid, error } = validateData(data, validator);\n\n  if (!isValid) {\n    throw new Error(error || \"Please pass in valid data to create a record\");\n  }\n\n  try {\n    const response = await axios.post(\n      url,\n      {\n        records: Array.isArray(data) ? [...data] : [data],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    throw new Error(\"Unable to create record in Airtable\");\n  }\n}\n\n/**\n * Updates a record in an Airtable table with the specified ID and data\n * @async\n * @param {string} recordId - ID of the record to update\n * @param {Object} data - New data for the record to be updated\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to update the record in\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object|null>} - Promise that resolves to the updated record or null if not found\n * @throws {Error} - Throws an error if unable to update the record in Airtable\n */\nasync function updateRecord(recordId, data, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n  try {\n    const response = await axios.patch(\n      url,\n      {\n        records: Array.isArray(data) ? [...data] : [data],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to update record in Airtable\");\n    }\n  }\n}\n\n/**\n * Deletes a record from an Airtable table with the specified ID\n * @async\n * @param {string} recordId - ID of the record to delete\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to delete the record from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<string|null>} - Promise that resolves to the deleted record ID or null if not found\n * @throws {Error} - Throws an error if unable to delete the record from Airtable\n */\nasync function deleteRecord(recordId, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n  try {\n    const response = await axios.delete(url, {\n      headers: {\n        Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n      },\n    });\n    return recordId;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to delete record from Airtable\");\n    }\n  }\n}\n\n/**\n * Creates an instance of the AirtableService.\n * @param {Object} options - An object that contains the configuration for the AirtableService.\n * @param {string} options.AIRTABLE_API_KEY - The API key for the Airtable account.\n * @param {string} options.AIRTABLE_BASE_ID - The ID of the Airtable base.\n * @param {string} options.AIRTABLE_TABLE_NAME - The name of the table in the Airtable base.\n * @returns {AirtableService} An instance of the AirtableService.\n */\nexport function AirtableService({\n  AIRTABLE_API_KEY,\n  AIRTABLE_BASE_ID,\n  AIRTABLE_TABLE_NAME,\n}) {\n  const config = {\n    AIRTABLE_API_KEY,\n    AIRTABLE_BASE_ID,\n    AIRTABLE_TABLE_NAME,\n  };\n  return {\n    airServiceLog: () => airServiceLog(),\n    getAllRecords: () => getAllRecords(config),\n    getRecordById: (recordId) => getRecordById(recordId, config),\n    createRecord: (data, validator) => createRecord(data, validator, config),\n    updateRecord: (recordId) => updateRecord(recordId, config),\n    deleteRecord: (recordId) => deleteRecord(recordId, config),\n  };\n}\n"],"names":["_catch","body","recover","result","e","then","_ref","config","AIRTABLE_API_KEY","AIRTABLE_BASE_ID","AIRTABLE_TABLE_NAME","airServiceLog","console","log","pkgJSON","getAllRecords","url","Promise","resolve","axios","get","headers","Authorization","response","status","data","records","Error","reject","getRecordById","recordId","error","createRecord","validator","_validateData","_data","_validator","isValid","validatorOutput","validatorOutputKeys","Object","keys","length","includes","validateData","post","Array","isArray","concat","updateRecord","patch","deleteRecord"],"mappings":"+GAkjBO,SAAAA,EAAgBC,EAAMC,GAC5B,IACC,IAAIC,EAASF,GACd,CAAE,MAAMG,GACP,OAAOF,EAAQE,EAChB,CACA,OAAID,GAAUA,EAAOE,KACbF,EAAOE,UAAK,EAAQH,GAErBC,CACR,yBArWgB,SAAeG,GAC7B,IAIMC,EAAS,CACbC,iBALcF,EAAhBE,iBAMEC,iBALcH,EAAhBG,iBAMEC,oBALiBJ,EAAnBI,qBAOA,MAAO,CACLC,cAAe,WArNjBC,QAAQC,IAA2BC,6BAqNG,EACpCC,cAAe,WAAA,OAzMJ,SAAcR,GAAM,IACjC,IAAMS,EAAqCT,+BAAAA,EAAOE,qBAAoBF,EAAOG,oBACnD,OAA1BE,QAAQC,IAAI,QAASG,GAAKC,QAAAC,QACHC,EAAAA,QAAMC,IAAIJ,EAAK,CACpCK,QAAS,CACPC,cAAyBf,UAAAA,EAAOC,qBAElCH,KAJIkB,SAAAA,GAKFA,GAAoB,MAApBA,EAASC,OACX,OAAOD,EAASE,KAAKC,QAErB,MAAM,IAAIC,MAAM,sCAEpB,EAAA,CAAC,MAAAvB,GAAA,OAAAa,QAAAW,OAAAxB,EAgLD,CAAA,CAYyBW,CAAcR,EAAO,EAC1CsB,cAAe,SAACC,GAAa,OAhLL,SAACA,EAAUvB,GAAQ,IAC7C,IAAMS,EAAqCT,+BAAAA,EAAOE,qBAAoBF,EAAOG,oBAAmB,IAAIoB,EAC1E,OAA1BlB,QAAQC,IAAI,QAASG,GAAKC,QAAAC,QAAAlB,aACtBiB,OAAAA,QAAAC,QACqBC,EAAK,QAACC,IAAIJ,EAAK,CACpCK,QAAS,CACPC,cAAyBf,UAAAA,EAAOC,qBAElCH,KAAA,SAJIkB,GAKN,OAAOA,EAASE,IAAK,EACvB,WAASM,GACHA,GAA0B,MAA1BA,EAAMR,SAASC,OACjB,OAAO,KAEP,MAAU,IAAAG,MAAM,qCAEpB,GACF,CAAC,MAAAvB,GAAA,OAAAa,QAAAW,OAAAxB,EA3Cc,CAAA,CA0MkByB,CAAcC,EAAUvB,EAAO,EAC5DyB,aAAc,SAACP,EAAMQ,GAAc,gBAnJXR,EAAMQ,EAAW1B,GAAM,IACjD,IAAMS,EAAqCT,+BAAAA,EAAOE,iBAAoBF,IAAAA,EAAOG,oBAC7EE,QAAQC,IAAI,QAASG,GAErB,IA2BAkB,EA3BqB,SAACC,EAAOC,GAC3B,IAAKH,GAAkC,eAAdA,EACvB,MAAO,CACLI,SAAS,EACTN,MAAO,MAIX,IAAMO,EAAkBL,EAAUR,IAAS,CAAA,EACrCc,EAAsBC,OAAOC,KAAKH,GACxC,KACGC,GACAA,EAAoBG,QACpBH,EAAoBI,SAAS,YAC7BJ,EAAoBI,SAAS,UAE9B,MAAU,IAAAhB,MACR,oFAIJ,MAAO,CACLU,QAASC,EAAgBD,QACzBN,MAAOO,EAAgBP,MAE3B,CAE2Ba,GAE3B,IAFeV,EAAPG,QAGN,MAAU,IAAAV,MAHUO,EAALH,OAGU,gDAC1B,OAAAd,QAAAC,QAAAlB,EAAA,WAEGiB,OAAAA,QAAAC,QACqBC,EAAAA,QAAM0B,KAC3B7B,EACA,CACEU,QAASoB,MAAMC,QAAQtB,GAAKuB,GAAAA,OAAOvB,GAAQ,CAACA,IAE9C,CACEJ,QAAS,CACP,eAAgB,mBAChBC,cAAyBf,UAAAA,EAAOC,qBAGrCH,cAXKkB,GAYN,OAAOA,EAASE,IAAK,EACvB,EAASM,SAAAA,GAEP,MADAnB,QAAQC,IAAIkB,OACFJ,MAAM,sCAClB,GACF,CAAC,MAAAvB,GAAA,OAAAa,QAAAW,OAAAxB,EArFc,CAAA,CAiLwB4B,CAAaP,EAAMQ,EAAW1B,EAAO,EACxE0C,aAAc,SAACnB,GAAQ,OA/EA,SAACA,EAAUL,EAAMlB,GAAQ,IAClD,IAAMS,EAAqCT,+BAAAA,EAAOE,iBAAoBF,IAAAA,EAAOG,oBAAmB,IAAIoB,EAC1E,OAA1BlB,QAAQC,IAAI,QAASG,GAAKC,QAAAC,QAAAlB,EACtB,WAAA,OAAAiB,QAAAC,QACqBC,UAAM+B,MAC3BlC,EACA,CACEU,QAASoB,MAAMC,QAAQtB,GAAKuB,GAAAA,OAAOvB,GAAQ,CAACA,IAE9C,CACEJ,QAAS,CACP,eAAgB,mBAChBC,cAAa,UAAYf,EAAOC,qBAGrCH,KAAA,SAXKkB,GAYN,OAAOA,EAASE,IAAK,EACvB,EAAC,SAAQM,GAAO,GACgB,MAA1BA,EAAMR,SAASC,OACjB,OAAY,KAEZ,MAAU,IAAAG,MAAM,sCAEpB,GACF,CAAC,MAAAvB,GAAAa,OAAAA,QAAAW,OAAAxB,EAAA,CAAA,CAuD+B6C,CAAanB,EAAUvB,EAAO,EAC1D4C,aAAc,SAACrB,GAAQ,OA3CA,SAACA,EAAUvB,GAAM,IAC1C,IAAMS,iCAAqCT,EAAOE,iBAAgB,IAAIF,EAAOG,oBAAuBoB,IAAAA,EAC1E,OAA1BlB,QAAQC,IAAI,QAASG,GAAKC,QAAAC,QAAAlB,EAAA,WACtBiB,OAAAA,QAAAC,QACqBC,EAAAA,QAAK,OAAQH,EAAK,CACvCK,QAAS,CACPC,cAAa,UAAYf,EAAOC,qBAElCH,cAJIkB,GAKN,OAAOO,CAAS,EAClB,EAASC,SAAAA,GAAO,GACgB,MAA1BA,EAAMR,SAASC,OACjB,OAAY,KAEZ,MAAM,IAAIG,MAAM,wCAEpB,GACF,CAAC,MAAAvB,UAAAa,QAAAW,OAAAxB,EAAA,CAAA,CA0B+B+C,CAAarB,EAAUvB,EAAO,EAE9D"}